# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdIwtpGg2rN6zUFsTdM5NGDgboFlUVDD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

data_path = data_path = '../data/raw/Behavior of the urban traffic of the city of Sao Paulo in Brazil.csv' 

# Cargar el archivo con el separador correcto (punto y coma)
df = pd.read_csv(data_path, sep=';', engine='python')

# Diccionario para decodificar las horas codificadas
HOURS = {
    1: "7:00", 2: "7:30", 3: "8:00", 4: "8:30", 5: "9:00", 6: "9:30", 7: "10:00", 
    8: "10:30", 9: "11:00", 10: "11:30", 11: "12:00", 12: "12:30", 13: "13:00", 
    14: "13:30", 15: "14:00", 16: "14:30", 17: "15:00", 18: "15:30", 19: "16:00", 
    20: "16:30", 21: "17:00", 22: "17:30", 23: "18:00", 24: "18:30", 25: "19:00",
    26: "19:30", 27: "20:00"
}

# Decodificar la columna 'Hour (Coded)' usando el diccionario de horas
df['Hour_decoded'] = df['Hour (Coded)'].map(HOURS)

# Mostrar los primeros registros con las horas decodificadas
print("Primeros registros después de decodificar las horas:")
print(df[['Hour (Coded)', 'Hour_decoded']].head())

# Mostrar información general del dataset para verificar que esté correcto
print("\nInformación del dataset:")
print(df.info())
df

#Estadistica Descriptiva
df.describe()

# Identificar Valores Nulos
print(df.isnull().sum()  )

#Comentarios:
print('\nEn la variable "Hour_Decoded" se presentan 5 datos vacíos, las demás columnas no presentan datos nulos.')

#Renombrar Variable Objetivo
df.rename(columns={'Slowness in traffic (%),': 'Slowness in traffic (%)'}, inplace=True)

#Reemplazar delimitador de variable objetivo por . para convertir a tipo numerico
df['Slowness in traffic (%)'] = df['Slowness in traffic (%)'].str.replace(',', '.')

# Convertir la variable objetivo a tipo numérico
df['Slowness in traffic (%)'] = pd.to_numeric(df['Slowness in traffic (%)'], errors='coerce')

print(df.describe())

#Distribucion de la variable Objetivo
plt.figure(figsize=(6, 3))
sns.histplot(df['Slowness in traffic (%)'], kde=True)
plt.title('Distribución de la variable objetivo: Slowness in traffic (%)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

print('Se observa una distribución asimétrica hacia la derecha, teniendo la moda a 7.5%')

#Distribucion de las variables numericas
df.hist(bins=50, figsize=(20, 15))
plt.show()

numeric_df = df.select_dtypes(include=[np.number])

# Generar el mapa de calor con las correlaciones
plt.figure(figsize=(10, 7))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title('Mapa de correlación entre variables')
plt.show()

print('Se visualiza una correlación alta en la variable "Hour" y "Slowness in traffic", lo que sugiere que el % de lentitud en el tráfico está fuertemente relacionado con la hora')
print('Se visualiza una correlación alta en la variable de "Semaphore off" y "lack of electricity", que es esperada y lógica ya que una falta de energía dejaría sin funcionar los semáforos')

corr_matrix = numeric_df.corr()
corr_matrix['Slowness in traffic (%)'].sort_values(ascending=False)

"""#Preprocesamiento de Datos"""

# Seleccionar solo las columnas numéricas
numeric_cols = df.select_dtypes(include=[np.number]).columns

# Rellenar los valores NaN en las columnas numéricas con la media de cada columna
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())

# Verificar si se rellenaron los valores faltantes
print(df.isnull().sum())
